{"name": "test_registration_tutor_too_long_password", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge css-3sclwl\" tabindex=\"-1\" type=\"submit\" disabled=\"\">...</button> is not clickable at point (953, 545). Other element would receive the click: <form class=\"MuiBox-root css-0\">...</form>\n  (Session info: chrome=116.0.5845.179)\nStacktrace:\n\tGetHandleVerifier [0x010D37C3+48947]\n\t(No symbol) [0x01068551]\n\t(No symbol) [0x00F6C92D]\n\t(No symbol) [0x00F9E276]\n\t(No symbol) [0x00F9CF4D]\n\t(No symbol) [0x00F9B74B]\n\t(No symbol) [0x00F9ABA5]\n\t(No symbol) [0x00F93420]\n\t(No symbol) [0x00FB508C]\n\t(No symbol) [0x00F92EB6]\n\t(No symbol) [0x00FB53E4]\n\t(No symbol) [0x00FC75DA]\n\t(No symbol) [0x00FB4E86]\n\t(No symbol) [0x00F916C7]\n\t(No symbol) [0x00F9284D]\n\tGetHandleVerifier [0x0131FDF9+2458985]\n\tGetHandleVerifier [0x0136744F+2751423]\n\tGetHandleVerifier [0x01361361+2726609]\n\tGetHandleVerifier [0x01150680+560624]\n\t(No symbol) [0x0107238C]\n\t(No symbol) [0x0106E268]\n\t(No symbol) [0x0106E392]\n\t(No symbol) [0x010610B7]\n\tBaseThreadInitThunk [0x759D00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7AEE+238]", "trace": "self = <tests.guest.test_registration.RegistrationTestCase testMethod=test_registration_tutor_too_long_password>\n\n    def test_registration_tutor_too_long_password(self):\n        registration = (HomePageGuest(self.driver)\n                        .click_started_for_free()\n                        .click_become_a_tutor())\n>       (registration.set_first_name(\"test\")\n                     .set_last_name(\"test\")\n                     .set_email(\"test@gmail.com\")\n                     .set_password(\"11111111111111111111111111q\")\n                     .click_sign_up_btn())\n\ntests\\guest\\test_registration.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nSpaceToStudy\\ui\\pages\\sign_up_modal\\sign_up_modal.py:209: in click_sign_up_btn\n    sign_up_btn.click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B4A57807C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge css-3sclwl\" tabindex=\"-1\" type=\"submit\" disabled=\"\">...</button> is not clickable at point (953, 545). Other element would receive the click: <form class=\"MuiBox-root css-0\">...</form>\nE         (Session info: chrome=116.0.5845.179)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010D37C3+48947]\nE       \t(No symbol) [0x01068551]\nE       \t(No symbol) [0x00F6C92D]\nE       \t(No symbol) [0x00F9E276]\nE       \t(No symbol) [0x00F9CF4D]\nE       \t(No symbol) [0x00F9B74B]\nE       \t(No symbol) [0x00F9ABA5]\nE       \t(No symbol) [0x00F93420]\nE       \t(No symbol) [0x00FB508C]\nE       \t(No symbol) [0x00F92EB6]\nE       \t(No symbol) [0x00FB53E4]\nE       \t(No symbol) [0x00FC75DA]\nE       \t(No symbol) [0x00FB4E86]\nE       \t(No symbol) [0x00F916C7]\nE       \t(No symbol) [0x00F9284D]\nE       \tGetHandleVerifier [0x0131FDF9+2458985]\nE       \tGetHandleVerifier [0x0136744F+2751423]\nE       \tGetHandleVerifier [0x01361361+2726609]\nE       \tGetHandleVerifier [0x01150680+560624]\nE       \t(No symbol) [0x0107238C]\nE       \t(No symbol) [0x0106E268]\nE       \t(No symbol) [0x0106E392]\nE       \t(No symbol) [0x010610B7]\nE       \tBaseThreadInitThunk [0x759D00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AB7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AB7AEE+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "30ed042a-9b27-44b2-9336-d6d40132d6f7-attachment.txt", "type": "text/plain"}], "start": 1694175070279, "stop": 1694175113401, "uuid": "0d7a40cf-e4de-486d-9b02-25291c46fc92", "historyId": "d7020495e6e8fa4e393b93635aac87f1", "testCaseId": "d7020495e6e8fa4e393b93635aac87f1", "fullName": "tests.guest.test_registration.RegistrationTestCase#test_registration_tutor_too_long_password", "labels": [{"name": "parentSuite", "value": "tests.guest"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "RegistrationTestCase"}, {"name": "host", "value": "DESKTOP-EA1E9C6"}, {"name": "thread", "value": "5696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.guest.test_registration"}]}